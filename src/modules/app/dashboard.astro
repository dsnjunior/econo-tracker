---
import { eq, and, lte, or, ne } from "drizzle-orm";

import { db, schema } from "@/lib/db";
import { createCategoriesIfNotExist } from "@/lib/helpers/create-categories";
import { deleteEmptyData } from "@/lib/helpers/delete-empty-data";

import DataCard from "@/components/data-card.astro";
import { BarChart } from "@/components/ui/chart/bar";
import { idContext } from "@/lib/id";

const { auth, t, lang } = Astro.locals;

const session = await auth.validate();

if (!session) {
  return null;
}

const today = new Date();
const lastDayOfMonthInOneYear = new Date(
  today.getFullYear() + 1,
  today.getMonth(),
  0,
).toISOString();

async function queryEarnings() {
  const result = await db.query.earning.findMany({
    where: and(
      eq(schema.earning.userId, session!.user.userId),
      lte(schema.earning.date, lastDayOfMonthInOneYear),
      or(ne(schema.earning.amount, 0), ne(schema.earning.timeZone, "")),
    ),
    orderBy: (earning, { desc }) => [desc(earning.date)],
    with: { category: true },
  });

  return result;
}

async function queryFixedEarnings() {
  const result = await db.query.fixedEarningRegister.findMany({
    where: and(
      eq(schema.fixedEarningRegister.userId, session!.user.userId),
      lte(schema.fixedEarningRegister.dueDate, lastDayOfMonthInOneYear),
      or(
        ne(schema.fixedEarning.amount, 0),
        ne(schema.fixedEarning.timeZone, ""),
      ),
    ),
    orderBy: (fixedEarningRegister, { desc }) => [
      desc(fixedEarningRegister.dueDate),
    ],
    with: { fixedEarning: { with: { category: true } } },
  });

  return result;
}

async function queryExpenses() {
  const result = await db.query.expense.findMany({
    where: and(
      eq(schema.expense.userId, session!.user.userId),
      lte(schema.expense.date, lastDayOfMonthInOneYear),
      or(ne(schema.expense.amount, 0), ne(schema.expense.timeZone, "")),
    ),
    orderBy: (expense, { desc }) => [desc(expense.date)],
    with: { category: true },
  });

  return result;
}

async function queryFixedExpenses() {
  const result = await db.query.fixedExpenseRegister.findMany({
    where: and(
      eq(schema.fixedExpenseRegister.userId, session!.user.userId),
      lte(schema.fixedExpenseRegister.dueDate, lastDayOfMonthInOneYear),
      or(
        ne(schema.fixedExpense.amount, 0),
        ne(schema.fixedExpense.timeZone, ""),
      ),
    ),
    orderBy: (fixedExpenseRegister, { desc }) => [
      desc(fixedExpenseRegister.dueDate),
    ],
    with: { fixedExpense: { with: { category: true } } },
  });

  return result;
}

const [, , earnings, fixedEarningRegisters, expenses, fixedExpenseRegisters] =
  await Promise.all([
    createCategoriesIfNotExist(lang, session.user.userId),
    deleteEmptyData(session.user.userId),
    queryEarnings(),
    queryFixedEarnings(),
    queryExpenses(),
    queryFixedExpenses(),
  ]);

function transformData(
  raw:
    | (typeof earnings)[number]
    | (typeof fixedEarningRegisters)[number]
    | (typeof expenses)[number]
    | (typeof fixedExpenseRegisters)[number],
) {
  if ("fixedEarning" in raw) {
    return {
      ...raw,
      type: "income",
      description: raw.fixedEarning!.description!,
      date: raw.dueDate,
      url: Astro.locals.translatePath(
        `/app/fixed-earnings/${raw.fixedEarningId}`,
      ),
      fixed: true,
      category: raw.fixedEarning!.category!,
    } as const;
  }
  if ("fixedExpense" in raw) {
    return {
      ...raw,
      type: "expense",
      description: raw.fixedExpense!.description!,
      date: raw.dueDate,
      url: Astro.locals.translatePath(
        `/app/fixed-expenses/${raw.fixedExpenseId}`,
      ),
      fixed: true,
      category: raw.fixedExpense!.category!,
    } as const;
  }

  const isEarning = raw.id.startsWith(idContext["earning"]);

  return {
    ...raw,
    type: isEarning ? "income" : "expense",
    url: isEarning
      ? Astro.locals.translatePath(`/app/earnings/${raw.id}`)
      : Astro.locals.translatePath(`/app/expenses/${raw.id}`),
    fixed: false,
    category: raw.category!,
  } as const;
}

const orderedData = [
  ...earnings,
  ...fixedEarningRegisters,
  ...expenses,
  ...fixedExpenseRegisters,
]
  .sort((a, b) => {
    const aDate = "date" in a ? a.date : a.dueDate;
    const bDate = "date" in b ? b.date : b.dueDate;

    return new Date(aDate).getTime() - new Date(bDate).getTime();
  })
  .map(transformData);

const chartData = orderedData.reduce(
  (acc, data) => {
    const date = new Date(data.date);
    const month = date.getMonth();
    const year = date.getFullYear();

    // @ts-ignore
    const name = `${t(`months.${month}`)} ${year}`;

    let currentIndex = acc.findIndex((item) => item?.name === name);

    if (currentIndex === -1) {
      currentIndex =
        acc.push({
          name,
          [t("income")]: 0,
          [t("expenses")]: 0,
        }) - 1;
    }

    if (data.type === "income") {
      acc[currentIndex][t("income")] += data.amount;
    } else {
      acc[currentIndex][t("expenses")] += data.amount;
    }

    return acc;
  },
  [] as { [x: string]: any; name: string }[],
);

const chartKeys = [
  { key: t("income"), color: "#22c55e" },
  { key: t("expenses"), color: "#ef4444" },
];
---

{
  !!orderedData.length && (
    <div class="h-80 mt-8">
      <BarChart data={chartData} keys={chartKeys} client:load />
    </div>
  )
}
<div class="space-y-4 mt-8">
  {orderedData.map((data) => <DataCard data={data} />)}
</div>
{
  !orderedData.length && (
    <div class="mt-12 text-center">
      <p class="text-muted-foreground mb-4">{t("dashboard.empty")}</p>
    </div>
  )
}
