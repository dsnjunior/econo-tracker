---
import { eq, and, lte, or, ne } from "drizzle-orm";

import { db, schema } from "@/lib/db";
import { deleteAllEmptyExpenses } from "@/lib/helpers/delete-empty-data";

import App from "@/layouts/app.astro";
import InsertDataButton from "@/components/insert-data-button";
import { Heading } from "@/components/ui/heading";
import DataCard from "@/components/data-card.astro";
import { AreaChart } from "@/components/ui/chart/area";

const { auth, t } = Astro.locals;

const session = await auth.validate();

if (!session) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const today = new Date();
const lastDayOfMonthInOneYear = new Date(
  today.getFullYear() + 1,
  today.getMonth(),
  0,
).toISOString();

async function queryExpenses() {
  const result = await db.query.expense.findMany({
    where: and(
      eq(schema.expense.userId, session!.user.userId),
      lte(schema.expense.date, lastDayOfMonthInOneYear),
      or(ne(schema.expense.amount, 0), ne(schema.expense.timeZone, "")),
    ),
    orderBy: (expense, { desc }) => [desc(expense.date)],
    with: { category: true },
  });

  return result;
}

async function queryFixedExpenses() {
  const result = await db.query.fixedExpenseRegister.findMany({
    where: and(
      eq(schema.fixedExpenseRegister.userId, session!.user.userId),
      lte(schema.fixedExpenseRegister.dueDate, lastDayOfMonthInOneYear),
      or(
        ne(schema.fixedExpense.amount, 0),
        ne(schema.fixedExpense.timeZone, ""),
      ),
    ),
    orderBy: (fixedExpenseRegister, { desc }) => [
      desc(fixedExpenseRegister.dueDate),
    ],
    with: { fixedExpense: { with: { category: true } } },
  });

  return result;
}

const [, expenses, fixedExpenseRegisters] = await Promise.all([
  deleteAllEmptyExpenses(session.user.userId),
  queryExpenses(),
  queryFixedExpenses(),
]);

function transformData(
  raw: (typeof expenses)[number] | (typeof fixedExpenseRegisters)[number],
) {
  if ("fixedExpense" in raw) {
    return {
      ...raw,
      type: "expense",
      description: raw.fixedExpense!.description!,
      date: raw.dueDate,
      url: Astro.locals.translatePath(
        `/app/fixed-expenses/${raw.fixedExpenseId}`,
      ),
      fixed: true,
      category: raw.fixedExpense!.category!,
    } as const;
  }

  return {
    ...raw,
    type: "expense",
    url: Astro.locals.translatePath(`/app/expenses/${raw.id}`),
    fixed: false,
    category: raw.category!,
  } as const;
}

const orderedData = [...expenses, ...fixedExpenseRegisters]
  .sort((a, b) => {
    const aDate = "date" in a ? a.date : a.dueDate;
    const bDate = "date" in b ? b.date : b.dueDate;

    return new Date(aDate).getTime() - new Date(bDate).getTime();
  })
  .map(transformData);

const chartData = orderedData.reduce(
  (acc, data) => {
    const date = new Date(data.date);
    const month = date.getMonth();
    const year = date.getFullYear();

    // @ts-ignore
    const name = `${t(`months.${month}`)} ${year}`;

    let currentIndex = acc.findIndex((item) => item?.name === name);

    if (currentIndex === -1) {
      currentIndex =
        acc.push({
          name,
          [t("expenses")]: 0,
        }) - 1;
    }

    acc[currentIndex][t("expenses")] += data.amount;

    return acc;
  },
  [] as { [x: string]: any; name: string }[],
);

const chartKeys = [{ key: t("expenses"), color: "#ef4444" }];
---

<App title={t("pagetitle.expenses")}>
  <div class="px-4 py-8 container max-w-2xl">
    <div class="sm:flex items-center">
      <Heading
        title={t("pagetitle.expenses")}
        description={t("pagedescription.expenses")}
        className="mb-8 sm:mb-0 sm:pr-2 sm:mr-auto"
      />
      <InsertDataButton />
    </div>
    {
      !!orderedData.length && (
        <div class="h-80 mt-8">
          <AreaChart data={chartData} keys={chartKeys} client:idle />
        </div>
      )
    }
    <div class="space-y-4 mt-8">
      {orderedData.map((data) => <DataCard data={data} />)}
    </div>
    {
      !orderedData.length && (
        <div class="mt-12 text-center">
          <p class="text-muted-foreground mb-4">{t("dashboard.empty")}</p>
        </div>
      )
    }
  </div>
</App>
