---
import { and, eq } from "drizzle-orm";
import { ArrowLeft, Copy, Trash } from "lucide-react";

import App from "@/layouts/app.astro";
import { Heading } from "@/components/ui/heading";
import { ExpenseForm, expenseForm } from "@/modules/expenses/expense-form";
import { Success } from "@/components/form";
import { buttonVariants } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";

import { db, schema } from "@/lib/db";
import { cn } from "@/lib/utils";

const { expenseId } = Astro.params;
const { auth, t, form } = Astro.locals;

const session = await auth.validate();

if (!session || !expenseId) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const formResult = await form.getDataByName("expenseForm", expenseForm);

const expense = await (async () => {
  if (formResult?.data) {
    const result = await db
      .update(schema.expense)
      .set(formResult.data)
      .where(
        and(
          eq(schema.expense.id, expenseId),
          eq(schema.expense.userId, session.user.userId),
        ),
      )
      .returning();

    return result[0];
  }

  return await db.query.expense.findFirst({
    where: and(
      eq(schema.expense.id, expenseId),
      eq(schema.expense.userId, session.user.userId),
    ),
  });
})();

if (!expense) {
  return Astro.redirect(Astro.locals.translatePath("/app"));
}

const categories = await db.query.expenseCategory.findMany({
  where: eq(schema.expenseCategory.userId, session.user.userId),
});
---

<App>
  <div class="p-4 container">
    <div>
      <a
        href={Astro.locals.translatePath("/app")}
        class={cn(
          buttonVariants({ size: "sm", variant: "link" }),
          "-ml-4 mb-4",
        )}
      >
        <ArrowLeft className="w-4 h-4 mr-2" />
        {t("back")}
      </a>
      <div class="flex flex-col md:flex-row justify-between">
        <Heading
          title={t("expenses.form.title")}
          description={t("expenses.form.description")}
        />
        <div
          class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2 mt-4 md:mt-0"
        >
          <a
            href={Astro.locals.translatePath(
              `/app/expenses/${expenseId}/delete`,
            )}
            class={buttonVariants({ variant: "destructive", size: "sm" })}
            data-astro-prefetch="false"
          >
            <Trash className="w-4 h-4 mr-2" />
            {t("expenses.delete")}
          </a>
          <a
            href={Astro.locals.translatePath(
              `/app/expenses/${expenseId}/duplicate`,
            )}
            class={buttonVariants({ variant: "outline", size: "sm" })}
            data-astro-prefetch="false"
          >
            <Copy className="w-4 h-4 mr-2" />
            {t("expenses.duplicate")}
          </a>
        </div>
      </div>
      <div class="mt-4">
        <a
          href={Astro.locals.translatePath(`/app/expenses/${expenseId}/fixed`)}
          class="flex items-center space-x-2"
          data-astro-prefetch="false"
        >
          <Switch id="fixed" />
          <Label htmlFor="fixed">{t("expenses.fixed")}</Label>
        </a>
      </div>
    </div>
    <div class="py-4">
      {
        !!formResult?.data && (
          <Success lang={Astro.locals.lang} className="mb-4" />
        )
      }
      <ExpenseForm
        serverErrors={formResult?.fieldErrors}
        expense={expense}
        categories={categories}
        client:only
      />
    </div>
  </div>
</App>
