---
import { eq } from "drizzle-orm";

import { db, schema } from "@/lib/db";

import App from "@/layouts/app.astro";
import InsertDataButton from "@/components/insert-data-button";
import Heading from "@/components/ui/heading.astro";
import { PieChart } from "@/components/ui/chart/pie";

const { auth, t } = Astro.locals;

const session = await auth.validate();

if (!session) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const userHasProductType = await db.query.productType.findFirst({
  where: eq(schema.productType.userId, session.user.userId),
});

if (!userHasProductType) {
  return Astro.redirect(Astro.locals.translatePath("/app/product-types/new"));
}

const userHasProductColor = await db.query.productColor.findFirst({
  where: eq(schema.productColor.userId, session.user.userId),
});

if (!userHasProductColor) {
  return Astro.redirect(Astro.locals.translatePath("/app/product-colors"));
}

const productsInStock = await db.query.productInStock.findMany({
  where: eq(schema.productInStock.userId, session.user.userId),
  with: { type: true, color: true, size: true },
});

const productsInStockByType = productsInStock
  .reduce(
    (acc, pis) => {
      const idx = acc.findIndex((item) => item.id === pis.type.id);
      if (idx === -1) {
        acc.push({
          value: pis.quantity,
          id: pis.type.id,
          label: pis.type.name,
        });
        return acc;
      }

      acc[idx].value += pis.quantity;

      return acc;
    },
    [] as {
      value: number;
      id: string;
      label: string;
    }[],
  )
  .map((item) => ({
    ...item,
    id: item.label,
  }));

const productsInStockByColor = productsInStock
  .reduce(
    (acc, pis) => {
      const idx = acc.findIndex((item) => item.id === pis.color.id);
      if (idx === -1) {
        acc.push({
          value: pis.quantity,
          id: pis.color.id,
          label: pis.color.name,
        });
        return acc;
      }

      acc[idx].value += pis.quantity;

      return acc;
    },
    [] as {
      value: number;
      id: string;
      label: string;
    }[],
  )
  .map((item) => ({
    ...item,
    id: item.label,
  }));

const productsInStockBySize = productsInStock.reduce(
  (acc, pis) => {
    const idx = acc.findIndex((item) => item.id === pis.size.name);
    if (idx === -1) {
      acc.push({
        value: pis.quantity,
        id: pis.size.name,
        label: pis.size.name,
      });
      return acc;
    }

    acc[idx].value += pis.quantity;

    return acc;
  },
  [] as {
    value: number;
    id: string;
    label: string;
  }[],
);
---

<App title={t("pagetitle.app")}>
  <div class="px-4 py-8 container max-w-2xl">
    <div class="sm:flex items-center">
      <Heading
        title={t("pagetitle.app")}
        description={t("pagedescription.app")}
        class="mb-8 sm:mb-0 sm:pr-2 sm:mr-auto"
      />
      <InsertDataButton />
    </div>
    <div transition:name="content">
      {
        productsInStock && (
          <div class="mt-8 grid md:grid-cols-2 gap-10">
            <div class="h-80 w-full">
              <h2 class="text-xl font-bold tracking-tight mb-4">
                Produtos no estoque por tipo
              </h2>
              <PieChart data={productsInStockByType} client:only />
            </div>
            <div class="h-80 w-full">
              <h2 class="text-xl font-bold tracking-tight mb-4">
                Produtos no estoque por tamanho
              </h2>
              <PieChart data={productsInStockBySize} client:only />
            </div>
            <div class="h-80 w-full">
              <h2 class="text-xl font-bold tracking-tight mb-4">
                Produtos no estoque por cor
              </h2>
              <PieChart data={productsInStockByColor} client:only />
            </div>
          </div>
        )
      }
    </div>
  </div>
</App>
