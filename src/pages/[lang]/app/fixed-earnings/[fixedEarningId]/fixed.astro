---
import { and, eq } from "drizzle-orm";

import { db, schema } from "@/lib/db";
import { createId } from "@/lib/id";

const { fixedEarningId } = Astro.params;
const { auth } = Astro.locals;

const session = await auth.validate();

if (!session || !fixedEarningId) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const originalFixedEarning = await db.query.fixedEarning.findFirst({
  where: and(
    eq(schema.fixedEarning.id, fixedEarningId),
    eq(schema.fixedEarning.userId, session.user.userId),
  ),
});

if (!originalFixedEarning) {
  return Astro.redirect(Astro.locals.translatePath("/"));
}

const id = createId("earning");

await db.insert(schema.earning).values({
  id,
  amount: originalFixedEarning.amount,
  description: originalFixedEarning.description,
  date: originalFixedEarning.startDate,
  timeZone: originalFixedEarning.timeZone,
  userId: session.user.userId,
  categoryId: originalFixedEarning.categoryId,
});

await db
  .delete(schema.fixedEarningRegister)
  .where(
    and(
      eq(schema.fixedEarningRegister.fixedEarningId, fixedEarningId),
      eq(schema.fixedEarningRegister.userId, session.user.userId),
    ),
  );

await db
  .delete(schema.fixedEarning)
  .where(
    and(
      eq(schema.fixedEarning.id, fixedEarningId),
      eq(schema.fixedEarning.userId, session.user.userId),
    ),
  );

return Astro.redirect(Astro.locals.translatePath(`/app/earnings/${id}`));
---
